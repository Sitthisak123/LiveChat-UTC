generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat_user {
  chat_id                            Int              @id @default(autoincrement())
  chat_user_one                      Int
  chat_user_two                      Int
  chat_createTime                    DateTime         @default(now()) @db.Timestamp(0)
  user_chat_user_chat_user_oneTouser user             @relation("chat_user_chat_user_oneTouser", fields: [chat_user_one], references: [user_id], onDelete: Cascade, map: "fk_user_one")
  user_chat_user_chat_user_twoTouser user             @relation("chat_user_chat_user_twoTouser", fields: [chat_user_two], references: [user_id], onDelete: Cascade, map: "fk_user_two")
  msg_user_reply                     msg_user_reply[]

  @@unique([chat_user_one, chat_user_two], name: "unique_chat_users")
  @@index([chat_user_two], map: "fk_user_two")
}

model friends_relationship {
  fk_user_one                                 Int
  fk_user_two                                 Int
  relation_status                             Int
  relation_createTime                         DateTime @default(now()) @db.Timestamp(0)
  user_friends_relationship_fk_user_oneTouser user     @relation("friends_relationship_fk_user_oneTouser", fields: [fk_user_one], references: [user_id], onDelete: Cascade)
  user_friends_relationship_fk_user_twoTouser user     @relation("friends_relationship_fk_user_twoTouser", fields: [fk_user_two], references: [user_id], onDelete: Cascade)

  @@id([fk_user_one, fk_user_two])
  @@index([fk_user_two], map: "friends_relationship_fk_user_two_fkey")
}

model msg_user_reply {
  msg_reply_id      Int         @id @default(autoincrement())
  fk_chat_id        Int
  fk_user_owner     Int
  msg_reply_message String      @db.Text
  msg_createTime    DateTime    @default(now()) @db.Timestamp(0)
  msg_type          MessageType @default(TEXT)
  msg_status        Int
  msg_read          Int
  chat_user         chat_user   @relation(fields: [fk_chat_id], references: [chat_id], onDelete: Cascade, map: "fk_chat_id")
  user              user        @relation(fields: [fk_user_owner], references: [user_id], onDelete: Cascade, map: "fk_user_one_chat")

  @@index([fk_chat_id], map: "fk_chat_id")
  @@index([fk_user_owner], map: "fk_user_one_chat")
  @@map("msg-user_reply")
}

model user {
  user_id                                                     Int                    @id @default(autoincrement())
  google_id                                                   Int?                   @unique(map: "google_id")
  user_custom_id                                              String?                @unique(map: "user_custom_id") @db.VarChar(60)
  user_username                                               String                 @unique(map: "user_username") @db.VarChar(60)
  user_password                                               String                 @db.VarChar(256)
  user_email                                                  String                 @unique(map: "user_email") @db.VarChar(256)
  user_phone                                                  String                 @unique(map: "user_phone") @db.VarChar(12)
  user_name                                                   String                 @db.TinyText
  user_profile_img                                            String                 @default("user_default.png") @db.VarChar(256)
  user_cover_img                                              String                 @default("user_default.png") @db.VarChar(256)
  chat_user_chat_user_chat_user_oneTouser                     chat_user[]            @relation("chat_user_chat_user_oneTouser")
  chat_user_chat_user_chat_user_twoTouser                     chat_user[]            @relation("chat_user_chat_user_twoTouser")
  friends_relationship_friends_relationship_fk_user_oneTouser friends_relationship[] @relation("friends_relationship_fk_user_oneTouser")
  friends_relationship_friends_relationship_fk_user_twoTouser friends_relationship[] @relation("friends_relationship_fk_user_twoTouser")
  msg_user_reply                                              msg_user_reply[]
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  PDF
  FILE
}
